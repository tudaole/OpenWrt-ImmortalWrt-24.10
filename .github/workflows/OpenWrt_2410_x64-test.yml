name: OpenWrt_2410_x64-test

on:
  workflow_dispatch:
  repository_dispatch:
    types: [on-update]

env:
  REPO_URL: https://github.com/immortalwrt/immortalwrt
  REPO_NAME: immortalwrt
  REPO_BRANCH: openwrt-24.10
  OpenWrt_VERSION: 24.10
  OpenWrt_ARCH: x86-64
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  DIY_P1_SH: immortalwrt/diy-part1-x64-test.sh
  DIY_P2_SH: immortalwrt/diy-part2-x64-test.sh
  FILE_NAME: OpenWrt_2410_x64-test
  TZ: Asia/Shanghai
  TELEGRAM_WORK_PUSH: true
  WECHAT_WORK_PUSH: true

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      - name: 检查服务器配置
        run: |
          echo "若分配的服务器性能不足，务必及时取消，重新运行！"
          echo -e "------------------------------- CPU信息 -------------------------------"
          echo "CPU物理数量:$(cat /proc/cpuinfo| grep "physical id"| sort| uniq| wc -l)"
          echo -e "CPU核心及版本信息: $(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c) \n"
          echo -e "------------------------------- 内存信息 -------------------------------"
          echo "已安装内存详细信息: "
          sudo lshw -short -C memory | grep GiB
          echo -e "\n"
          echo -e "------------------------------- 磁盘信息 -------------------------------"
          echo -e "磁盘数量: $(ls /dev/sd* | grep -v [1-9] | wc -l) \n"
          echo -e "------------------------------- 磁盘详情 -------------------------------"
          df -Th

      - name: 清理磁盘空间 (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true

      - name: 检查磁盘检使用情况
        if: (!cancelled())
        run: df -hT

      - name: 准备完成
        uses: actions/checkout@main

      - name: 初始化编译环境
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo -E apt-get -qq update
          sudo bash -c 'bash <(curl -s https://build-scripts.immortalwrt.org/init_build_environment.sh)'
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          sudo timedatectl set-timezone "${TZ}"
          sudo mkdir -p /workdir
          sudo chown $USER:$GROUPS /workdir

      - name: 下载固件源码
        working-directory: /workdir
        run: |
          df -hT $PWD
          git clone -b ${REPO_BRANCH} --single-branch --depth 1 ${REPO_URL} openwrt
          ln -sf /workdir/openwrt ${GITHUB_WORKSPACE}/openwrt

      - name: 加载自定义feeds
        run: |
          [ -e ${FEEDS_CONF} ] && mv ${FEEDS_CONF} openwrt/feeds.conf.default
          chmod +x ${DIY_P1_SH}
          cd openwrt
          ${GITHUB_WORKSPACE}/${DIY_P1_SH}

      - name: 更新feeds
        run: cd openwrt && ./scripts/feeds update -a

      - name: 安装feeds
        run: cd openwrt && ./scripts/feeds install -a

      - name: 生成默认配置
        run: cd openwrt && make defconfig
      
      - name: 加载自定义配置
        run: |
          chmod +x ${DIY_P2_SH}
          cd openwrt
          ${GITHUB_WORKSPACE}/${DIY_P2_SH}

      - name: 下载软件包
        id: package
        run: |
          cd openwrt
          make defconfig
          make download -j8
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;

      - name: 编译固件
        id: compile
        run: |
          cd openwrt
          echo -e "$(($(nproc) + 1)) thread compile"
          make -j$(($(nproc) + 1)) V=s || make -j1 || make -j1 V=s
          echo "status=success" >> $GITHUB_OUTPUT
          echo "COMPILE_DATE=$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

      - name: 检查磁盘使用情况
        if: (!cancelled())
        run: df -hT

      - name: 列出固件文件
        if: steps.compile.outputs.status == 'success' && !cancelled()
        run: |
          cd openwrt/bin/targets/*/*
          echo -e "------------------------------- 文件列表 -------------------------------"
          ls
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV

      - name: 整理固件
        if: steps.compile.outputs.status == 'success' && !cancelled()
        run: |
          cp -rf openwrt/.config ${{ env.FIRMWARE }}/config
          cd ${{ env.FIRMWARE }}
          rm -rf packages
          rm -rf *.buildinfo
          rm -rf profiles.json
          rm -rf immortalwrt-${{ env.OpenWrt_ARCH }}-generic-kernel.bin
          rm -rf immortalwrt-${{ env.OpenWrt_ARCH }}-generic.manifest
          rm -rf immortalwrt-${{ env.OpenWrt_ARCH }}-generic-squashfs-rootfs.img.gz
          rm -rf immortalwrt-${{ env.OpenWrt_ARCH }}-generic-rootfs.tar.gz
          mv immortalwrt-${{ env.OpenWrt_ARCH }}-generic-squashfs-combined-efi.img.gz immortalwrt-${{ env.OpenWrt_VERSION }}-${{ env.OpenWrt_ARCH }}-${{ env.FILE_NAME }}-efi-${{ env.COMPILE_DATE }}.img.gz
          echo -e "------------------------------- 文件列表 -------------------------------"
          ls

      - name: 生成发布标签
        id: tag
        if: steps.compile.outputs.status == 'success' && !cancelled()
        run: |
          echo "release_tag=${{ env.FILE_NAME }}" >> ${GITHUB_OUTPUT}
          touch release.txt
          echo "
          💻 架构: ${{ env.OpenWrt_ARCH }}

          📂 源码: ${{ env.REPO_URL }}

          🌳 分支: ${{ env.REPO_BRANCH }}

          ⏱️ 编译时间: ${{ env.COMPILE_DATE }}

          🌐 管理地址: 192.168.1.11 , 子网掩码: 255.255.255.0

          👤 用户名: root

          🔒 密码: password 
          
          " > release.txt
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: 发布固件到 Releases
        uses: softprops/action-gh-release@v2
        if: steps.tag.outputs.status == 'success' && !cancelled()
        with:
          tag_name: ${{ env.FILE_NAME }}
          token: ${{ secrets.GH_TOKEN }}
          body_path: release.txt
          files: ${{ env.FIRMWARE }}/*

      - name: Telegram notification upload success
        if: steps.tag.outputs.status == 'success' && env.TELEGRAM_WORK_PUSH == 'true'
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
            ♨️ 【${{ env.FILE_NAME }}】项目编译完成 ♨️            
            💻 架构: ${{ env.OpenWrt_ARCH }}  
            📂 源码: ${{ env.REPO_URL }}  
            🌳 分支: ${{ env.REPO_BRANCH }}  
            ⏱️ 编译时间: ${{ env.COMPILE_DATE }}  
            🌐 管理地址: 192.168.1.11 , 子网掩码: 255.255.255.0  
            👤 用户名: root  
            🔒 密码: password             
            https://github.com/tudaole/OpenWrt-ImmortalWrt-24.10/releases/tag/${{ env.REPO_NAME }}_${{ env.OpenWrt_VERSION }}_${{ env.OpenWrt_ARCH }}
  
      - name: Enterprise WeChat notification upload success
        if: steps.tag.outputs.status == 'success' && env.WECHAT_WORK_PUSH == 'true'
        run: |
          curl -X POST "https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=${{ secrets.WEBHOOK_SEND_KEY }}" \
          -H "Content-Type: application/json" \
          -d '{
              "msgtype": "news",
              "news": {
                "articles": [
                  {
                    "title": "♨️ 【${{ env.FILE_NAME }}】项目编译完成 ♨️",
                    "description": "- ❀  固件名称：${{ env.FILE_NAME }}-${{ env.REPO_BRANCH }}\n
                      💻 架构: ${{ env.OpenWrt_ARCH }}
            
                      📂 源码: ${{ env.REPO_URL }}
            
                      🌳 分支: ${{ env.REPO_BRANCH }}
            
                      ⏱️ 编译时间: ${{ env.COMPILE_DATE }}
            
                      🌐 管理地址: 192.168.1.11 , 子网掩码: 255.255.255.0
            
                      👤 用户名: root
            
                      🔒 密码: password 
                      
                    "url": "https://github.com/tudaole/OpenWrt-ImmortalWrt-24.10/releases/tag/${{ env.REPO_NAME }}_${{ env.OpenWrt_VERSION }}_${{ env.OpenWrt_ARCH }}"
                  }
                ]
              }
            }'
